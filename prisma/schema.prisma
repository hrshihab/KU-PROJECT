// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String     @id @default(uuid())
  email              String     @unique
  password           String
  role               UserRole
  needPasswordChange Boolean    @default(true)
  status             UserStatus @default(ACTIVE)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  admin              Admin?
  news               News[]
  careers            Career[]
  nocs               NOC[]

  @@map("users")
}

model Admin {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  profilePhoto  String?
  contactNumber String
  isDeleted     Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [email], references: [email])

  @@map("admins")
}

// ðŸŸ¢ VC Message Model (Vice Chancellor's Message)
model VCMessage {
  id          String   @id @default(uuid())
  message     String
  imageUrl    String?
  updatedAt   DateTime @updatedAt

  @@map("vc_message")
}

model News {
  id          String   @id @default(uuid())
  title       String
  description String
  imageUrl    String?
  date        DateTime @default(now())
  createdBy   String   // User ID of the creator
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [createdBy], references: [email])  // Relation to the User model

  @@map("news")
}

model Career {
  id           String   @id @default(uuid())
  title        String
  date         DateTime @default(now())
  documentsUrl String
  createdBy    String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  isDeleted    Boolean  @default(false)
  user         User     @relation(fields: [createdBy], references: [email])

  @@map("careers")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum NOCType {
  NOC
  GO
}

model NOC {
  id            String   @id @default(uuid())
  title         String
  type          NOCType
  publishedDate DateTime @default(now())
  documentsUrl  String
  createdBy     String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)
  user          User     @relation(fields: [createdBy], references: [email])

  @@map("nocs")
}

enum SupportStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum SupportCategory {
  IT
  ELECTRICAL
  PLUMBING
  CARPENTRY
  CLEANING
  SECURITY
  OTHER
}

model Support {
  id                String         @id @default(uuid())
  name              String
  designation       String
  instituteOffice   String
  email             String
  buildingName      String?
  roomNumber        String?
  mobileNumber      String?
  problemDescription String
  attachmentUrl     String?
  status            SupportStatus  @default(PENDING)
  category          SupportCategory
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isDeleted         Boolean        @default(false)

  @@map("supports")
}

